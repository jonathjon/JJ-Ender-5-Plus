
# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.

[include mainsail.cfg]
[exclude_object]
[display_status]
[gcode_arcs]
[pause_resume]
[include K-ShakeTune/*.cfg]
#[include OrbiterSensor.cfg]
[skew_correction]
[include autoz.cfg]
[include mmu/base/*.cfg]
[include mmu/addons/mmu_erec_cutter.cfg]
[include mmu/optional/client_macros.cfg]
[include stealthburner_leds.cfg]
[include klicky-probe.cfg]

[mcu rpi]
serial: /tmp/klipper_host_mcu

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E00270002504B5735313920-if00

[mcu EBBCan]
canbus_uuid: eba8c5d5aaef

#[mcu MMB]
#canbus_uuid: 90928ac9fcfd

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: EBBCan: PB6
position_endstop: 382
position_min: -8
position_max: 382
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 1.100
hold_current: 0.600
stealthchop_threshold: 0

[stepper_y]
step_pin: PB10
dir_pin: PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: 384
position_min: -12
position_max: 384
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 1.100
hold_current: 0.600
stealthchop_threshold: 0

[stepper_z]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps: 16
rotation_distance: 4
endstop_pin: ^PC2
#position_endstop: 2
position_min: -5
position_max: 400

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.900
hold_current: 0.600
stealthchop_threshold: 999999

[stepper_z1]
step_pin: PB0
dir_pin: !PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 4
#endstop_pin: probe: z_virtual_endstop
#position_min: -5
#position_max: 350

[tmc2209 stepper_z1]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.900
hold_current: 0.600
stealthchop_threshold: 999999

#[extruder]
#step_pin: PB3
#dir_pin: !PB4
#enable_pin: !PD1
#microsteps: 16
#rotation_distance: 33.500
#nozzle_diameter: 0.400
#filament_diameter: 1.750
#heater_pin: PC8
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: PA0
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
#min_temp: 0
#max_temp: 250

#[tmc2209 extruder]
#uart_pin: PC11
#tx_pin: PC10
#uart_address: 3
#run_current: 0.650
#stealthchop_threshold: 999999

[extruder]
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 16
rotation_distance: 4.6492
nozzle_diameter: 0.600
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: EPCOS 100K B57560G104F
sensor_pin: EBBCan: PA3
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 0
max_temp: 300
max_extrude_cross_section: 250
max_extrude_only_distance: 250

[tmc2209 extruder]
uart_pin: EBBCan: PA15
interpolate: true
run_current: 0.85 #**
sense_resistor: 0.11 #**
stealthchop_threshold: 0
driver_TBL: 0
driver_HEND: 6
driver_HSTRT: 7
driver_TOFF: 4

#[filament_switch_sensor switch_sensor]
#switch_pin: EBBCan:PB3

[idle_timeout]
timeout: 96000

#[safe_z_home]
#home_xy_position: 385, 290
#speed: 150
#z_hop: 10
#z_hop_speed: 20

[probe]
pin: EBBCan: PB8 
x_offset: -1.75
y_offset: 35
#z_offset: 5
speed: 6
lift_speed: 15
samples: 2
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.01
samples_tolerance_retries: 5

[endstop_phase]

[z_tilt]
z_positions:-200, 180
            397, 180
#   A list of X, Y coordinates (one per line; subsequent lines
#   indented) describing the location of each bed "pivot point". The
#   "pivot point" is the point where the bed attaches to the given Z
#   stepper. It is described using nozzle coordinates (the X, Y position
#   of the nozzle if it could move directly above the point). The
#   first entry corresponds to stepper_z, the second to stepper_z1,
#   the third to stepper_z2, etc. This parameter must be provided.
points: 15, 140
        367, 140
#   A list of X, Y coordinates (one per line; subsequent lines
#   indented) that should be probed during a Z_TILT_ADJUST command.
#   Specify coordinates of the nozzle and be sure the probe is above
#   the bed at the given nozzle coordinates. This parameter must be
#   provided.
speed: 150
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 20
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
retries: 8
#   Number of times to retry if the probed points aren't within
#   tolerance.
retry_tolerance: 0.01
#   If retries are enabled then retry if largest and smallest probed
#   points differ more than retry_tolerance. Note the smallest unit of
#   change here would be a single step. However if you are probing
#   more points than steppers then you will likely have a fixed
#   minimum value for the range of probed points which you can learn
#   by observing command output.


[bed_mesh]
speed: 250
horizontal_move_z: 15
mesh_min: 20, 40
mesh_max: 370,370
probe_count: 5, 5
algorithm: bicubic
bicubic_tension: 0.2
#fade_start: 1
#fade_end: 10
#fade_target: 0

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
#control: pid
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

#[heater_fan heatbreak_cooling_fan]
#pin: PC7

[heater_fan hotend_fan]
pin: EBBCan: PA1
heater: extruder
heater_temp: 50.0

[heater_fan controller_fan]
pin: PB15

#[fan]
#pin: PC6

[fan]
#pin: EBBCan: PA0
pin: rpi:gpio26
#pwm: true
max_power: 1
cycle_time: 0.002
hardware_pwm: false
shutdown_speed: 0

[neopixel neo]
pin: PA8
chain_count: 25
color_order: GRB
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.5

#[neopixel hotend_rgb]
#pin: EBBCan:PD3
#chain_count: 3
#color_order: GRBW
#initial_WHITE: .5

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 3000
max_z_velocity: 20
max_z_accel: 100
minimum_cruise_ratio: 0.5

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345
probe_points:
    191, 180, 50

[input_shaper]
shaper_freq_x: 52.6
shaper_type_x: 2hump_ei
shaper_freq_y: 52.0
shaper_type_y: 2hump_ei


[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor EBB_Temperature]
sensor_type: temperature_mcu
sensor_mcu: EBBCan

[temperature_sensor MMU_Temperature]
sensor_type: temperature_mcu
sensor_mcu: mmu

[screws_tilt_adjust]
screw1: 20, 20
screw1_name: Lower Left
screw2: 370, 20
screw2_name: Lower Right
screw3: 370, 280
screw3_name: Upper Right
screw4: 20, 280
screw4_name: Upper Left
speed: 200
horizontal_move_z: 15
screw_thread: CW-M4

#[z_calibration] Depreciated to auto_z.cfg
#nozzle_xy_position: 181, 381
#switch_xy_offsets: -2, -35
#bed_xy_position: 190, 145
#switch_offset: 0.46
#start_gcode: Attach_Probe
#end_gcode: Dock_Probe
#speed: 200


#######################################################################################
###############                   MACROS                          #####################
#######################################################################################


# See the sample-lcd.cfg file for definitions of common LCD displays.

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10


[gcode_macro PRINT_START]
gcode:
  {% set BED = params.BED_TEMP|int %}
  {% set EXTRUDER = params.EXTRUDER_TEMP|int %}
  M140 S{BED}  ;Set bed temperature
  M104 S{EXTRUDER}  ;Set extruder temperature and wait
  M190 S{BED}  ;Set bed temperature and wait
  G28  ; Home Printer
  _CHOME  ;Home all axes if not homed
  _CZTILT  ;Z Tilt if not done
  CLEAN_NOZZLE
  CALIBRATE_Z  ; Set Z offset
  BED_MESH_CALIBRATE ADAPTIVE=1
#  _ZEROG_PURGE
#  G90  ;Set to absolute positioning
#  SKEW_PROFILE LOAD=calilantern_skew_profile

[gcode_macro _CHOME]
gcode:
  {% if printer["gcode_macro status_homing"] != null %}
    status_homing
  {% endif %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}
[gcode_macro _CZTILT]
gcode:
  {% if printer["gcode_macro status_leveling"] != null %}
    status_leveling
  {% endif %}
    {% if printer.z_tilt.applied == False %}
        Z_TILT_ADJUST
    {% endif %}
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}

[gcode_macro _PRINT_START_2]
gcode:
  _ZEROG_PURGE
  G90  ;Set to absolute positioning
  SKEW_PROFILE LOAD=calilantern_skew_profile
  status_printing


[gcode_macro M190]
rename_existing: M190.1
gcode:
  {% if printer["gcode_macro status_heating"] != null %}
    status_heating
  {% endif %}
    M190.1 { rawparams }
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}


[gcode_macro M109]
rename_existing: M109.1
gcode:
  {% if printer["gcode_macro status_heating"] != null %}
    status_heating
  {% endif %}
    M109.1 { rawparams }
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}

# # # Klipper Adaptive Purging - ZeroG Logo # # #

# This is pretty much the same as this one: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging/blob/main/Configuration/Voron_Purge.cfg but changed to draw the ZeroG Logo instead.
# This macro will parse information from objects in your gcode to define a min and max area, creating a nearby purge with ZeroG flair!
# For successful purging, you may need to configure:
#
# [extruder]
# ...
# max_extrude_cross_section: 5

[gcode_macro _ZEROG_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.4              # Height above the bed to purge
variable_tip_distance: 5           # Distance between filament tip and nozzle before purge (this will require some tuning)
variable_purge_amount: 25         # Amount of filament to purge (40)
variable_flow_rate: 15              # Desired flow rate in mm3/s
variable_x_default: 10              # X location to purge, overwritten if adaptive is True
variable_y_default: 10              # Y location to purge, overwritten if adaptive is True
variable_size: 15                   # Size of the logo
variable_distance_to_object_x: 10   # Distance in x to the print area
variable_distance_to_object_y: 10   # Distance in y to the print area

### This section is for those who are using Moonraker's Update Manager for KAMP, or want a more verbose macro. ###

variable_display_parameters: True   # Display macro paramters in the console, useful for debugging the SETUP_ZEROG_PURGE call, or more verbosity.

gcode:

    {% if display_parameters == True %}
      { action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
      { action_respond_info("z_height        : %f" % (z_height))  }
      { action_respond_info("tip_distance    : %f" % (tip_distance))  }
      { action_respond_info("purge_amount    : %f" % (purge_amount))  }
      { action_respond_info("flow_rate       : %f" % (flow_rate))  }
      { action_respond_info("x_default       : %f" % (x_default))  }
      { action_respond_info("y_default       : %f" % (y_default))  }
      { action_respond_info("size            : %f" % (size))  }
      { action_respond_info("distance_to_object_x : %f" % (distance_to_object_x))  }
      { action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
    {% endif %}

    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}
    {% set travel_speed = printer.toolhead.max_velocity %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }


    G92 E0                                                                              # Reset extruder
    G0 F{travel_speed*60}                                                               # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin+size*0.7} Y{y_origin+size*0.5}                                        # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E{tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle
    
    #Draw me like one of your french girls    
    G0 X{x_origin+size}     Y{y_origin+size*0.7} E{purge_amount*0.080} F{purge_move_speed*60}
    G0 X{x_origin+size}     Y{y_origin+size*0.4} E{purge_amount*0.067} F{purge_move_speed*60}
    G0 X{x_origin+size*0.5} Y{y_origin}          E{purge_amount*0.142} F{purge_move_speed*60}
    G0 X{x_origin}          Y{y_origin+size*0.4} E{purge_amount*0.142} F{purge_move_speed*60}
    G0 X{x_origin+size}     Y{y_origin+size}     E{purge_amount*0.259} F{purge_move_speed*60}
    G0 X{x_origin}          Y{y_origin+size}     E{purge_amount*0.222} F{purge_move_speed*60}
    G0 X{x_origin}          Y{y_origin+size*0.6} E{purge_amount*0.089} F{purge_move_speed*60}

    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop

    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode

[gcode_macro _SETUP_ZEROG_PURGE]
gcode:
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=tip_distance  VALUE={params.TIP_DISTANCE|default(10)|float}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(10)|float}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=size          VALUE={params.SIZE|default(10)|float}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=distance_to_object_x     VALUE={params.DISTANCE_TO_OBJECT_X|default(10)|float}
    SET_GCODE_VARIABLE MACRO=ZEROG_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}

[gcode_macro _ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.4              # Height above the bed to purge
variable_tip_distance: 10           # Distance between filament tip and nozzle before purge (this will require some tuning)
variable_purge_amount: 40           # Amount of filament to purge
variable_flow_rate: 10              # Desired flow rate in mm3/s
variable_x_default: 5              # X location to purge, overwritten if adaptive is True
variable_y_default: 5              # Y location to purge, overwritten if adaptive is True
variable_size: 10                   # Size of the logo
variable_distance_to_object_x: 5   # Distance in x to the print area
variable_distance_to_object_y: 5   # Distance in y to the print area

gcode:
    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
        
         {% if x_origin < x_default %}
            set x_origin = x_default | float
         {% endif %}
         
         {% if y_origin < y_default %}
            set y_origin = y_default | float
         {% endif %}

    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    
  
    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}
    {% set travel_speed = printer.toolhead.max_velocity %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }

    G92 E0
    G0 F{travel_speed*5}                                                               # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin+size/2}                                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E{tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle
    G1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60} # Purge first line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.789} Y{y_origin+size}                                          # Move to second purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}      # Purge second line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.711} Y{y_origin}                                               # Move to third purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}    # Purge third line of logo
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height*2}                                                                    # Z hop
    {% if printer["gcode_macro status_printing"] != null %}
        status_printing
    {% endif %}


[gcode_macro PRINT_END]
gcode:
    G1 E-5 F1800  ;Retract filament
    TURN_OFF_HEATERS  ;Turn off heaters
#  G0 Z300
   _MOVE_AWAY  ;Move away from print
   PARK_CENTER_REAR  ;Park central rear
   G91
   G0 Z25
   G90
   SET_SKEW CLEAR=1


[gcode_macro _MOVE_AWAY]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
      
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing


[gcode_macro PARK_CENTER_REAR]
gcode:
    {% if printer["gcode_macro status_busy"] != null %}
      status_busy
    {% endif %}
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}

    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  
    {% if printer["gcode_macro status_ready"] != null %}
    status_ready
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

#[gcode_macro CALIBRATE_Z]
#rename_existing: BASE_CALIBRATE_Z
#gcode:
#    {% set bed_position = params.BED_POSITION|default('None') %}
#    G28                         # can also be a conditional homing macro
#    M117 Z-Calibration..
#    Attach_Probe                # a macro for fetching the probe first
#    {% if bed_position != 'None' %}
#      BASE_CALIBRATE_Z BED_POSITION={bed_position}
#    {% else %}
#      BASE_CALIBRATE_Z
#    {% endif %}
#    Dock_Probe                  # and parking it afterwards (or DOCK_PROBE in klicky macros)
#    M117    


[gcode_macro CLEAN_NOZZLE]
variable_start_x: 260
variable_start_y: 382
variable_start_z: 9
variable_wipe_dist: 60
variable_wipe_qty: 10
variable_wipe_spd: 300
variable_raise_distance: 20

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#[gcode_macro SCREWS_TILT_CALCULATE]
#gcode:
#      SCREWS_TILT_CALCULATE

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 14.856
#*# pid_ki = 0.702
#*# pid_kd = 78.551
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 64.595
#*# pid_ki = 3.121
#*# pid_kd = 334.277
#*#
#*# [stepper_z]
#*# position_endstop = -0.1725
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	1.580875, 1.609000, 1.627125, 1.641500, 1.645875
#*# 	1.680250, 1.742125, 1.747125, 1.758375, 1.737125
#*# 	1.801500, 1.862750, 1.870250, 1.848375, 1.768375
#*# 	1.930250, 1.938375, 1.942125, 1.881500, 1.755250
#*# 	-0.165375, 1.807750, 1.882125, 1.795250, 1.652125
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 20.0
#*# max_x = 370.0
#*# min_y = 40.0
#*# max_y = 370.0
#*#
#*# [probe]
#*# z_offset = 8.351
#*#
#*# [skew_correction calilantern_skew_profile]
#*# xy_skew = -0.0021072445250547656
#*# xz_skew = -0.0010041223620400749
#*# yz_skew = -0.00200118487631475
#*#
#*# [endstop_phase stepper_z]
#*# trigger_phase = 32/64
